(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5196],{25196:n=>{n.exports='### 51. N-Queens\n\nThe n-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.\n\nGiven `an integer n`, return all distinct solutions to the n-queens puzzle.\n\nEach solution contains a distinct board configuration of the n-queens\' placement, where \'Q\' and \'.\' both indicate a queen and an empty space, respectively.\n\nExample 1:\n\n```js\nInput: n = 4\nOutput: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]\n\n. Q . .            . . Q .\n. . . Q     or     Q . . .\nQ . . .            . . . Q\n. . Q .            . Q . .\n```\n\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above.\n\nExample 2:\n\n```js\nInput: n = 1\nOutput: [["Q"]]\n```\n\n* Constraints:\n  * 1 <= n <= 9\n\n### Analyze\n\n```js\n    0   1   2   3\n0   .   Q   .   .\n\n1   .   .   .   Q\n\n2   Q   .   .   .\n\n3   .   .   Q   .\n```\n\n罗列从`右上到左下`斜线点发现规律: `横坐标与纵坐标之和为定值`。\n\n* `(0, 0)`\n* `(0, 1)、(1, 0)`\n* `(0, 2)、(1, 1)、(2, 0)`\n* `(0, 3)、(1, 2)、(2, 1)、(3, 0)`\n* `(1, 3)、(2, 2)、(3, 1)`\n* `(2, 3)、(3, 2)`\n* `(3, 3)`\n\n罗列从`左上到右下`斜线点发现规律: `横坐标与纵坐标之差为定值`。\n\n* `(3, 0)`\n* `(2, 0)、(3, 1)`\n* `(1, 0)、(2, 1)、(3, 2)`\n* `(0, 0)、(1, 1)、(2, 2)、(3, 3)`\n* `(0, 1)、(1, 2)、(2, 3)`\n* `(0, 2)、(1, 3)`\n* `(0, 3)`\n\n```js\n/**\n * @param {number} n\n * @return {string[][]}\n */\nvar solveNQueens = function(n) {\n  const result = []\n  for (let x = 0; x < n; x++) {\n    for (let y = 0; y < n; y++) {\n      const used = []\n      const limit = {\n        x: [],\n        y: [],\n        sum: [],\n        diff: []\n      }\n      handleNQueens(x, y, used, limit, [], result, n)\n    }\n  }\n  return result\n};\n\nvar handleNQueens = (x, y, used, limit, output, result, n) => {\n  const sum = x + y\n  const diff = x - y\n  if (\n    used.indexOf(`${x},${y}`) > -1\n    || limit.x.indexOf(x) > -1\n    || limit.y.indexOf(y) > -1\n    || limit.sum.indexOf(sum) > -1\n    || limit.diff.indexOf(sum) > -1\n  ) {\n    return\n  }\n  if (limit.x.length === n) {\n    result.push(output)\n    return\n  }\n  for (m1 = x; m1 < n; m1++) {\n    for (m2 = y; m2 < n; m2++) {\n      used.push(`${x},${y}`)\n      output.push(`${x},${y}`)\n      console.log(\'output\', output)\n\n      limit.x.push(x)\n      limit.y.push(y)\n      limit.sum.push(sum)\n      limit.diff.push(diff)\n\n      handleNQueens(m1 + 1, m2 + 1, used, limit, result, output)\n      output.pop()\n      console.log(\'output\', output)\n    }\n  }\n}\n```'}}]);