(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5196],{25196:n=>{n.exports='### 51. N-Queens\n\nThe n-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.\n\nGiven `an integer n`, return all distinct solutions to the n-queens puzzle.\n\nEach solution contains a distinct board configuration of the n-queens\' placement, where \'Q\' and \'.\' both indicate a queen and an empty space, respectively.\n\nExample 1:\n\n```js\nInput: n = 4\nOutput: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]\n\n. Q . .            . . Q .\n. . . Q     or     Q . . .\nQ . . .            . . . Q\n. . Q .            . Q . .\n```\n\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above.\n\nExample 2:\n\n```js\nInput: n = 1\nOutput: [["Q"]]\n```\n\n* Constraints:\n  * 1 <= n <= 9\n\n### Analyze\n\n* 左上 -> 右下斜线\n\n```js\n    0   1   2   3\n0   .   Q   .   .\n\n1   .   .   .   Q\n\n2   Q   .   .   .\n\n3   .   .   Q   .\n```\n\n罗列从左上到右下斜线点发现规律: Todo\n\n* `(0, 0)`\n* `(0, 1)、(1, 0)`\n* `(0, 2)、(1, 1)、(2, 0)`\n* `(0, 3)、(1, 2)、(2, 1)、(3, 0)`\n\n* 右上 -> 左下斜线\n\n```js\n. Q . .\n. . . Q\nQ . . .\n. . Q .\n```\n\n```js\n/**\n * limit: {\n *      x: [],\n *      y: [],\n *   slash1(\\): [],\n *   slash2(/): []\n * }\n */\n/**\n * @param {number} n\n * @return {string[][]}\n */\nvar solveNQueens = function(n) {\n  const output = []\n  for (let x = 0; x < n; x++) {\n    for (let y = 0; y < n; y++) {\n      const used = []\n      const limit = {}\n      handleNQueens(x, y, used, limit, [], output)\n    }\n  }\n  return output\n};\n\nvar direction = [[1, 0], [0, 1], [-1, 0], [0, -1]] // bottom、right、top、left\n\nvar handleNQueens = (x, y, used, limit, result, output) => {\n  used.push(`${x},${y}`)\n  // if (invalid(x, y))\n  for (let i = 0; i < direction.length; i++) {\n    if (\n      used.indexOf(`${x},${y}`) > -1\n      || limit.x.indexOf(x) > -1\n      || limit.y.indexOf(y) > -1\n    ) {\n      continue\n    }\n    handleNQueens(x + direction[i][0], y + direction[i][1], used, limit, result, output)\n  }\n}\n```'}}]);